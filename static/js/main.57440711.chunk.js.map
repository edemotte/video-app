{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","props","useState","movies","setMovies","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","movie","key","id","isLargeRow","src","poster_path","backdrop_path","alt","name","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchAdventureMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundImage","backgroundSize","backgroundPosition","original_name","overview","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57440711.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/** base url to make requests to the the movie database */\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n\r\n/* We can only default export once\r\n\r\nif we want to export many then we can destructure it like so: \r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nand drop the export default line\r\n\r\nin this case the name of whever we export this will be really important.abs\r\n\r\nbut in our case the name doesn't matter\r\n\r\n*/\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row(props) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  //a snippet of code which runs based on a specific condition\r\n  useEffect(() => {\r\n    // if [], run once when the row loads, and dont run again\r\n    async function fetchData() {\r\n      const request = await axios.get(props.fetchUrl);\r\n      // console.log(request);\r\n      // console.table(request);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [props.fetchUrl]);\r\n  //why we use fetchUrl as a dependancy:\r\n  //we are using a variable that we are passing from outside the block,\r\n  //we have to tell Useffect that we are using a variable outside the block ,\r\n  //in this way we telling Useeffect that if something changes it has to re-fire the code\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{props.title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row__poster ${props.isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              props.isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          ></img>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"7a16de5de8f3c89fd5704f3f414bba20\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchAdventureMovies: `/discover/movie?api_key=${API_KEY}&with_genres=12`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport requests from \"./requests\";\r\nimport axios from \"./axios\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchTrending);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(\"hte movie\", movie);\r\n\r\n  function truncate(str, n) {\r\n    console.log(\"truncate\", str, n);\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h2 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h2>\r\n      </div>\r\n      <div className=\"banner--fadebottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n        // isLargeRow = {true} by default\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Adventure Movies\" fetchUrl={requests.fetchAdventureMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n\n// API Key (v3 auth)\n// 7a16de5de8f3c89fd5704f3f414bba20\n\n// Example API Request\n// https://api.themoviedb.org/3/movie/550?api_key=7a16de5de8f3c89fd5704f3f414bba20\n\n//netflix-clone-77223 firebase project id\n\n// Firebase Hosting\n// netflix-clone-77223\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}